import os
import folium
import webbrowser
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.checkbox import CheckBox
from kivy.uix.textinput import TextInput
from kivy.uix.slider import Slider

from attractions import attractions  # Attraktionen importieren

class RouteScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.selected_labels = []  # Vom Nutzer gewählte Filter
        self.selected_places = []  # Orte basierend auf den Filtern
        self.route_file = "route_map.html"  # Karte als HTML-Datei
        
        # Hauptlayout
        self.layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        self.label_info = Label(text="Filter wählen und Route erstellen", font_size=24)
        self.layout.add_widget(self.label_info)
        
        # CheckBox für Filter erstellen
        self.filter_layout = BoxLayout(orientation='vertical', size_hint=(1, 0.6))
        self.label_filters = Label(text="Filter nach Labels:", font_size=20)
        self.filter_layout.add_widget(self.label_filters)
        
        self.filters = ["History", "Green Field", "Architecture", "Mystery", "Relaxing"]
        self.filter_checkboxes = {}
        for label in self.filters:
            box = BoxLayout(orientation='horizontal', size_hint=(1, None), height=40)
            cb = CheckBox(size_hint=(None, None), size=(40, 40))
            cb.bind(active=lambda checkbox, state, lbl=label: self.toggle_label(lbl, state))
            self.filter_checkboxes[label] = cb
            box.add_widget(cb)
            box.add_widget(Label(text=label, font_size=18))
            self.filter_layout.add_widget(box)
        
        self.layout.add_widget(self.filter_layout)
        
        # Buttons für Aktionen
        self.button_generate = Button(text="Route erstellen", font_size=20, size_hint=(1, 0.2))
        self.button_generate.bind(on_press=self.generate_route)
        self.layout.add_widget(self.button_generate)
        
        self.button_back = Button(text="Zurück zur Startseite", font_size=20, size_hint=(1, 0.2))
        self.button_back.bind(on_press=self.go_home)
        self.layout.add_widget(self.button_back)
        
        self.add_widget(self.layout)
    
    def toggle_label(self, label, state):
        """Aktiviert oder deaktiviert einen Filter."""
        if state:
            self.selected_labels.append(label)
        else:
            self.selected_labels.remove(label)
    
    def generate_route(self, instance):
        """Generiert eine Route basierend auf den ausgewählten Filtern und zeigt diese auf einer Karte."""
        self.selected_places = [
            place for place in attractions
            if any(label in self.selected_labels for label in place["labels"])
        ]
        
        if self.selected_places:
            self.create_map(self.selected_places)
            self.manager.current = "map"
        else:
            self.label_info.text = "Keine passenden Orte gefunden."
    
    def create_map(self, places):
        """Erstellt eine HTML-Karte mit Folium."""
        avg_lat = sum(place["coords"][0] for place in places) / len(places)
        avg_lon = sum(place["coords"][1] for place in places) / len(places)
        
        # Karte erstellen
        map_obj = folium.Map(location=[avg_lat, avg_lon], zoom_start=4)
        for place in places:
            folium.Marker(location=place["coords"], popup=place["name"]).add_to(map_obj)
        
        coords = [place["coords"] for place in places]
        folium.PolyLine(coords, color="blue", weight=2.5, opacity=1).add_to(map_obj)
        
        map_obj.save(self.route_file)
    
    def go_home(self, instance):
        """Zurück zur Startseite."""
        self.manager.current = "home"


class MapScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        label = Label(text="Die Route wird im Browser angezeigt.", font_size=24)
        layout.add_widget(label)
        
        button_back = Button(text="Zurück zur Filterseite", font_size=20, size_hint=(1, 0.2))
        button_back.bind(on_press=self.go_back)
        layout.add_widget(button_back)
        
        self.add_widget(layout)
    
    def on_pre_enter(self):
        """Öffnet die Karte im Standardbrowser."""
        if os.path.exists("route_map.html"):
            webbrowser.open("route_map.html")
    
    def go_back(self, instance):
        """Zurück zur Routenplanung."""
        self.manager.current = "route"


class ProfileScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # Layout für das Profil
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        # Name des Nutzers
        self.name_input = TextInput(hint_text="Geben Sie Ihren Namen ein", font_size=20, size_hint=(1, 0.1))
        layout.add_widget(self.name_input)
        
        # Zurück-Button
        button_save = Button(text="Profil speichern", font_size=20, size_hint=(1, 0.2))
        button_save.bind(on_press=self.save_profile)
        layout.add_widget(button_save)
        
        # Zurück zur Startseite
        button_back = Button(text="Zurück zur Startseite", font_size=20, size_hint=(1, 0.2))
        button_back.bind(on_press=self.go_home)
        layout.add_widget(button_back)
        
        self.add_widget(layout)
    
    def save_profile(self, instance):
        """Speichert das Profil des Nutzers."""
        self.username = self.name_input.text
        if self.username:
            self.manager.current = "home"
        else:
            self.name_input.text = "Bitte Namen eingeben."
    
    def go_home(self, instance):
        """Zurück zur Startseite."""
        self.manager.current = "home"


class AttractionsScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # Layout für die Übersicht der Attraktionen
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        self.label = Label(text="Wählen Sie eine Attraktion aus und bewerten Sie sie.", font_size=24)
        layout.add_widget(self.label)
        
        # Liste der Attraktionen
        for place in attractions:
            button = Button(text=place["name"], font_size=20, size_hint=(1, None), height=50)
            button.bind(on_press=lambda instance, place=place: self.go_to_rating(place))
            layout.add_widget(button)
        
        # Zurück zur Startseite
        button_back = Button(text="Zurück zur Startseite", font_size=20, size_hint=(1, 0.2))
        button_back.bind(on_press=self.go_home)
        layout.add_widget(button_back)
        
        self.add_widget(layout)
    
    def go_to_rating(self, place):
        """Zur Bewertungsseite einer Attraktion wechseln."""
        self.manager.current = "rating"
        self.manager.get_screen("rating").set_place(place)
    
    def go_home(self, instance):
        """Zurück zur Startseite."""
        self.manager.current = "home"


class RatingScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # Layout für die Bewertungsseite
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        self.label = Label(text="Bewerten Sie die Attraktion", font_size=24)
        layout.add_widget(self.label)
        
        # Bewertungs-Slider
        self.slider = Slider(min=1, max=5, value=3, step=1, size_hint=(1, 0.2))
        layout.add_widget(self.slider)
        
        # Bewerten Button
        button_save = Button(text="Bewertung speichern", font_size=20, size_hint=(1, 0.2))
        button_save.bind(on_press=self.save_rating)
        layout.add_widget(button_save)
        
        # Zurück zur Attraktionsübersicht
        button_back = Button(text="Zurück zur Attraktionsübersicht", font_size=20, size_hint=(1, 0.2))
        button_back.bind(on_press=self.go_back)
        layout.add_widget(button_back)
        
        self.add_widget(layout)
    
    def set_place(self, place):
        """Setzt die aktuelle Attraktion für die Bewertung."""
        self.place = place
        self.label.text = f"Bewerten Sie: {place['name']}"
    
    def save_rating(self, instance):
        """Speichert die Bewertung und kehrt zurück zur Attraktionsübersicht."""
        rating = self.slider.value
        self.place["ratings"].append(rating)
        self.manager.current = "attractions"
    
    def go_back(self, instance):
        """Zurück zur Attraktionsübersicht."""
        self.manager.current = "attractions"


class HomeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # Layout der Home-Seite
        layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        label = Label(text="Willkommen in der Touristen-App!", font_size=24)
        layout.add_widget(label)
        
        # Buttons für die Navigation
        button_profile = Button(text="Mein Profil", font_size=20, size_hint=(1, 0.2))
        button_profile.bind(on_press=self.go_to_profile)
        layout.add_widget(button_profile)
        
        button_attractions = Button(text="Attraktionen anzeigen", font_size=20, size_hint=(1, 0.2))
        button_attractions.bind(on_press=self.go_to_attractions)
        layout.add_widget(button_attractions)
        
        button_route = Button(text="Route erstellen", font_size=20, size_hint=(1, 0.2))
        button_route.bind(on_press=self.go_to_route)
        layout.add_widget(button_route)
        
        self.add_widget(layout)
    
    def go_to_profile(self, instance):
        """Zur Profilseite wechseln."""
        self.manager.current = "profile"
    
    def go_to_attractions(self, instance):
        """Zur Attraktionsübersicht wechseln."""
        self.manager.current = "attractions"
    
    def go_to_route(self, instance):
        """Zur Routenplanungsseite wechseln."""
        self.manager.current = "route"


class TouristApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(HomeScreen(name="home"))
        sm.add_widget(RouteScreen(name="route"))
        sm.add_widget(MapScreen(name="map"))
        sm.add_widget(ProfileScreen(name="profile"))
        sm.add_widget(AttractionsScreen(name="attractions"))
        sm.add_widget(RatingScreen(name="rating"))
        return sm


if __name__ == "__main__":
    TouristApp().run()
